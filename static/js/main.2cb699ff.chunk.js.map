{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","defaultState","status","all","query","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","filteredTodos","useMemo","statusMatches","completed","queryMatches","title","trim","toLowerCase","includes","className","map","id","isSelected","cn","onClick","TodoFilter","onChange","event","target","value","active","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","useEffect","userId","href","email","name","App","todosFromServer","length","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2cb699ff.chunk.js","sourcesContent":["export enum Status {\n  all = 'all',\n  completed = 'completed',\n  active = 'active',\n}\n","import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype FilterByStatus = {\n  type: 'filter/STATUS',\n  payload: Status\n};\n\ntype FilterByQuery = {\n  type: 'filter/QUERY',\n  payload: string\n};\n\ninterface Filter {\n  status: Status,\n  query: string,\n}\n\ntype Action = FilterByStatus | FilterByQuery;\n\nconst filterByStatus = (payload: Status): FilterByStatus => (\n  { type: 'filter/STATUS', payload }\n);\nconst filterByQuery = (payload: string): FilterByQuery => (\n  { type: 'filter/QUERY', payload }\n);\n\nexport const actions = {\n  filterByStatus,\n  filterByQuery,\n};\n\nconst defaultState = {\n  status: Status.all,\n  query: '',\n};\n\nconst filterReducer = (state = defaultState, action: Action): Filter => {\n  switch (action.type) {\n    case 'filter/STATUS':\n      return { ...state, status: action.payload };\n    case 'filter/QUERY':\n      return { ...state, query: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype LoadTodos = {\n  type: 'todos/LOAD',\n  payload: Todo[]\n};\n\nconst loadTodos = (todos: Todo[]): LoadTodos => (\n  { type: 'todos/LOAD', payload: todos }\n);\n\nexport const actions = {\n  loadTodos,\n};\n\nconst todosReducer = (state: Todo[] = [], action: LoadTodos) => {\n  switch (action.type) {\n    case 'todos/LOAD':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { useMemo } from 'react';\nimport cn from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\nimport { Status } from '../../types/Status';\n\nexport const TodoList: React.FC = () => {\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const todos = useAppSelector(state => state.todos);\n  const filter = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n\n  const filteredTodos = useMemo(() => {\n    return todos.filter(todo => {\n      const statusMatches = filter.status === Status.all\n        || (filter.status === Status.completed\n          ? todo.completed : !todo.completed);\n\n      const queryMatches = todo.title.trim()\n        .toLowerCase()\n        .includes(\n          filter.query\n            .toLowerCase(),\n        );\n\n      return statusMatches && queryMatches;\n    });\n  }, [todos, filter.status, filter.query]);\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {filteredTodos.map(todo => {\n          const {\n            id,\n            title,\n            completed,\n          } = todo;\n          const isSelected = currentTodo?.id === id;\n\n          return (\n            <tr\n              data-cy=\"todo\"\n              className={cn({\n                'has-background-info-light': isSelected,\n              })}\n              key={id}\n            >\n              <td className=\"is-vcentered\">{id}</td>\n              <td className=\"is-vcentered\">\n                {completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p\n                  className={\n                    cn({\n                      'has-text-success': completed,\n                      'has-text-danger': !completed,\n                    })\n                  }\n                >\n                  {title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => dispatch(actions.setTodo(todo))}\n                >\n                  <span className=\"icon\">\n                    <i\n                      className={\n                        cn(\n                          'far',\n                          {\n                            'fa-eye': !(isSelected),\n                            'fa-eye-slash': isSelected,\n                          },\n                        )\n                      }\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { Status } from '../../types/Status';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const filter = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(actions.filterByQuery(event.target.value));\n  };\n\n  const handleChangeFilter = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(actions.filterByStatus(event.target.value as Status));\n  };\n\n  const handleResetQuery = () => {\n    dispatch(actions.filterByQuery(''));\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select data-cy=\"statusSelect\" onChange={handleChangeFilter}>\n            <option value={Status.all}>All</option>\n            <option value={Status.active}>Active</option>\n            <option value={Status.completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={filter.query}\n          onChange={handleChangeQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {filter.query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleResetQuery}\n              aria-label=\"delete\"\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { actions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(currentTodo?.userId || 0).then(setUser);\n  }, []);\n\n  return (\n    <div\n      className=\"modal is-active\"\n      data-cy=\"modal\"\n    >\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo?.id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              aria-label=\"delete-button\"\n              onClick={() => dispatch(actions.removeTodo())}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo?.completed && (\n                <strong className=\"has-text-success\">Done</strong>\n              )}\n              {!currentTodo?.completed && (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const todos = useAppSelector(state => state.todos);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    getTodos()\n      .then(todosFromServer => dispatch(actions.loadTodos(todosFromServer)));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {!todos.length ? (\n                <Loader />\n              ) : (\n                <TodoList />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {currentTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}